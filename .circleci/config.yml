version: 2.1
orbs:
  codecov: codecov/codecov@1.0.2
jobs:
  lints:
    docker:
      - image: circleci/golang:1.12
    working_directory: /go/src/github.com/antifuchs/o
    steps:
      - checkout
      - run:
          name: deps
          command: |
            go get -v -t -d ./...
            # golangci-lint:
            env GO111MODULE=on go get github.com/golangci/golangci-lint/cmd/golangci-lint@v1.15.0
      - run:
          name: golangci-lint
          command: |
            golangci-lint run -E goimports

  tests:
    docker:
      - image: circleci/golang:1.12
    working_directory: /go/src/github.com/antifuchs/o
    steps:
      - checkout
      - run:
          name: deps
          command: |
            go get -v -t -d ./...
            go get -v github.com/wadey/gocovmerge
      - run:
          name: "Create a temp directory for artifacts"
          command: |
            mkdir -p /tmp/artifacts
      - run:
          name: Run tests
          # This trick comes from https://medium.com/@taowen/go-test-coverage-for-multi-package-project-d4f36f2b573a:
          command: |
            srcpkg="$(go list ./... | grep -v vendor | tr "\n" , | sed 's/,$//')"
            mkdir /tmp/coverage
            for d in $(go list ./... | grep -v vendor); do
                go test -race -coverprofile=/tmp/coverage/$(echo "$d" | tr / _) -timeout=60s -coverpkg="$srcpkg" -v $d
            done
      - run:
          name: "Merge coverage"
          command: |
            gocovmerge /tmp/coverage/* > /tmp/coverage.txt
            go tool cover -html=/tmp/coverage.txt -o /tmp/artifacts/coverage.html
      - store_artifacts:
          path: /tmp/artifacts
          destination: /
      - codecov/upload:
          file: /tmp/coverage.txt


  benchmarks:
    docker:
      - image: circleci/golang:1.12
    working_directory: /go/src/github.com/antifuchs/o
    steps:
      - checkout
      - run:
          name: gofmt
          command: |
            gofmt -w .
      - run:
          name: deps
          command: |
            go get -v -t -d ./...
            go get github.com/cespare/prettybench
      - run:
          name: Run benchmarks
          command: |
            go test -run '^$' -bench . -v ./... | tee /tmp/benchmarks.txt
      - run:
          name: prettybench
          command: |
            mkdir -p /tmp/artifacts
            prettybench < /tmp/benchmarks.txt | tee /tmp/artifacts/benchmarks.txt
      - store_artifacts:
          path: /tmp/artifacts
          destination: /

  ci_success:
    docker:
      - image: alpine:latest
    steps:
      - run:
          name: Success
          command: "echo yay"

workflows:
  version: 2
  continuous_integration:
    jobs:
      - tests
      - benchmarks
      - lints
      - ci_success:
          requires:
            - tests
            - benchmarks
            - lints
